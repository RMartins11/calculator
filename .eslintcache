[{"C:\\Users\\ricar\\jsx\\calculator\\src\\index.js":"1","C:\\Users\\ricar\\jsx\\calculator\\src\\components\\App.js":"2","C:\\Users\\ricar\\jsx\\calculator\\src\\components\\Calculator.js":"3"},{"size":159,"mtime":1609793930868,"results":"4","hashOfConfig":"5"},{"size":201,"mtime":1609794456941,"results":"6","hashOfConfig":"5"},{"size":8211,"mtime":1609874093791,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"11fnnn",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\ricar\\jsx\\calculator\\src\\index.js",[],["16","17"],"C:\\Users\\ricar\\jsx\\calculator\\src\\components\\App.js",[],"C:\\Users\\ricar\\jsx\\calculator\\src\\components\\Calculator.js",["18","19"],"import React from \"react\";\r\nimport styles from \"../style/calculatorStyles.css\";\r\n\r\nconst isOperator = /[x/+‑]/,\r\n  endsWithOperator = /[x+‑/]$/,\r\n  endsWithNegativeSign = /\\d[x/+‑]{1}‑$/;\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props) {\r\n   super(props);\r\n  this.state = {\r\n    currentVal: \"0\",\r\n    prevVal: \"0\",\r\n    formula: \"\",\r\n    currentSign: \"pos\",\r\n    lastClicked: \"\"\r\n  };\r\nthis.maxDigitWarning = this.maxDigitWarning.bind(this);\r\nthis.handleOperators = this.handleOperators.bind(this);\r\nthis.handleEvaluate = this.handleEvaluate.bind(this);\r\nthis.initialize = this.initialize.bind(this);\r\nthis.handleDecimal = this.handleDecimal.bind(this);\r\nthis.handleNumbers = this.handleNumbers.bind(this);\r\n}\r\n\r\nmaxDigitWarning() {\r\n  this.setState({\r\n    currentVal: \"Digit Limit Met\",\r\n    prevVal: this.state.currentVal\r\n  });\r\n  setTimeout(() => this.setState({\r\n    currentVal: this.state.prevVal}), 1000);\r\n}\r\n\r\nhandleEvaluate() {\r\n  if (!this.state.currentVal.includes(\"Limit\")) {\r\n    let expression = this.state.formula;\r\n    while (endsWithOperator.test(expression)) {\r\n      expression = expression.slice(0, -1);\r\n    }\r\n    expression = expression\r\n        .replace(/x/g, '*')\r\n        .replace(/‑/g, '-')\r\n        .replace('--', '+0+0+0+0+0+0+');\r\n          let answer = Math.round(1000000000000 * eval(expression)) / 1000000000000;\r\n    this.setState({\r\n      currentVal: answer.toString(),\r\n      formula: \r\n       expression\r\n              .replace(/\\*/g, '⋅')\r\n              .replace(/-/g, '‑')\r\n              .replace('+0+0+0+0+0+0+', '‑-')\r\n              .replace(/(x|\\/|\\+)‑/, '$1-')\r\n              .replace(/^‑/, '-') +\r\n            '=' +\r\n            answer,\r\n          prevVal: answer,\r\n          evaluated: true\r\n    });\r\n  }\r\n}\r\n\r\nhandleOperators(e) {\r\n  if (!this.state.currentVal.includes(\"Limit\")) {\r\n    const value = e.target.value;\r\n    const { formula, prevVal, evaluated } = this.state;\r\n    this.setState({ currentVal: value, evaluated: false });\r\n    if (evaluated) {\r\n      this.setState({ formula: prevVal + value});\r\n    } else if (!endsWithOperator.test(formula)) {\r\n      this.setState({\r\n        prevVal: formula,\r\n        formula: formula + value\r\n      });\r\n    } else if (!endsWithNegativeSign.test(formula)) {\r\n      this.setState({\r\n        formula: \r\n        (endsWithNegativeSign.test(formula + value) ? formula : prevVal) + value\r\n      });\r\n    } else if (value !== \"-\") {\r\n      this.setState({\r\n        formula: prevVal + value\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nhandleNumbers(e) {\r\n  if (!this.state.currentVal.includes(\"Limit\")) {\r\n    const { currentVal, formula, evaluated } = this.state;\r\n    const value = e.target.value;\r\n    this.setState({ \r\n    evaluated: false\r\n    });\r\n    if (currentVal.length > 21) {\r\n      this.maxDigitWarning();\r\n    } else if (evaluated) {\r\n      this.setState({\r\n        currentVal: value, \r\n        formula: value !== \"0\" ? value : \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        currentVal: \r\n         currentVal === \"0\"  || isOperator.test(currentVal) \r\n        ? value\r\n        : currentVal + value,\r\n        formula: \r\n         currentVal === \"0\"  && value === \"0\"\r\n        ? formula === \"\"\r\n         ? value\r\n         : formula \r\n              : /([^.0-9]0|^0)$/.test(formula)\r\n              ? formula.slice(0, -1) + value\r\n              : formula + value\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nhandleDecimal() {\r\n  if (this.state.evaluated === true) {\r\n    this.setState({\r\n      currentVal: \"0.\",\r\n      formula: \"0.\",\r\n      evaluated: false\r\n    });\r\n  } else if (\r\n  !this.state.currentVal.includes(\".\") &&\r\n    !this.state.currentVal.includes(\"Limit\")\r\n  ) {\r\n    this.setState({ evaluated: false });\r\n    if (this.state.currentVal.length > 21) {\r\n      this.maxDigitWarning();\r\n    } else if (\r\n    endsWithOperator.test(this.state.formula) ||\r\n      (this.state.currentVal === \"0\" && this.state.formula === \"\")\r\n    ) {\r\n      this.setState({\r\n        currentVal: \"0.\",\r\n        formula: this.state.formula + \"0.\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        currentVal: this.state.formula.match(/(-?\\d+\\.?\\d*)$/)[0] + '.',\r\n          formula: this.state.formula + '.'\r\n      });\r\n    }\r\n  }\r\n}\r\ninitialize() {\r\n  this.setState({\r\n    currentVal: \"0\",\r\n    prevVal: \"0\",\r\n    formula: \"\",\r\n    currentSign: \"pos\",\r\n    lastClicked: \"\",\r\n    evaluated: false\r\n  });\r\n}\r\n\r\nrender() {\r\n  return (\r\n  <div>\r\n    <div className=\"calculator\">\r\n      <Formula formula={this.state.formula.replace(/x/g, '⋅')} />\r\n      <Output currentValue={this.state.currentVal} />\r\n       <Buttons\r\n         decimal={this.handleDecimal}\r\n         evaluate={this.handleEvaluate}\r\n         initialize={this.initialize}\r\n         numbers={this.handleNumbers}\r\n         operators={this.handleOperators}\r\n         />\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\nclass Buttons extends React.Component {\r\n  render() {\r\n    return (\r\n    <div>\r\n        <button\r\n          className=\"jumbo\"\r\n          id=\"clear\"\r\n          onClick={this.props.initialize}\r\n          style={{background: \"#ac3939\"}}\r\n          value=\"C\"\r\n          >\r\n          C\r\n        </button>\r\n        <button\r\n          id=\"divide\"\r\n          onClick={this.props.operators}\r\n          style={{ background: \"#666666\" }}\r\n          value=\"/\"\r\n          >\r\n          /\r\n        </button>\r\n        <button\r\n          id=\"multiply\"\r\n          onClick={this.props.operators}\r\n          style={{ background: \"#666666\" }}\r\n          value=\"x\"\r\n          >\r\n          x\r\n        </button>\r\n        <button \r\n          id=\"seven\"\r\n          onClick={this.props.numbers}\r\n          value=\"7\"\r\n          >\r\n          7\r\n        </button>\r\n        <button\r\n          id=\"eight\"\r\n          onClick={this.props.numbers}\r\n          value=\"8\"\r\n          >\r\n          8\r\n        </button>\r\n        <button\r\n          id=\"nine\"\r\n          onClick={this.props.numbers}\r\n          value=\"9\"\r\n          >\r\n          9\r\n        </button>\r\n        <button\r\n          id=\"subtract\"\r\n          onClick={this.props.operators}\r\n          style={{ background: \"#666666\" }}\r\n          value=\"‑\"\r\n        >\r\n          ‑\r\n        </button>\r\n        <button\r\n          id=\"four\"\r\n          onClick={this.props.numbers}\r\n          value=\"4\"\r\n          >\r\n          4\r\n        </button>\r\n        <button\r\n          id=\"five\"\r\n          onClick={this.props.numbers}\r\n          value=\"5\"\r\n          >\r\n          5\r\n        </button>\r\n        <button\r\n          id=\"six\"\r\n          onClick={this.props.numbers}\r\n          value=\"6\"\r\n          >\r\n          6\r\n        </button>\r\n        <button\r\n          id=\"add\"\r\n          onClick={this.props.operators}\r\n          style={{ background: \"#666666\" }}\r\n          value=\"+\"\r\n          >\r\n          +\r\n        </button>\r\n        <button\r\n          id=\"one\"\r\n          onClick={this.props.numbers}\r\n          value=\"1\"\r\n          >\r\n          1\r\n        </button>\r\n        <button\r\n          id=\"two\"\r\n          onClick={this.props.numbers}\r\n          value=\"2\"\r\n          >\r\n          2\r\n        </button>\r\n        <button\r\n          id=\"three\"\r\n          onClick={this.props.numbers}\r\n          value=\"3\"\r\n          >\r\n          3\r\n        </button>\r\n        <button\r\n          className=\"jumbo\"\r\n          id=\"zero\"\r\n          onClick={this.props.numbers}\r\n          value=\"0\"\r\n          >\r\n          0\r\n        </button>\r\n        <button\r\n          id=\"decimal\"\r\n          onClick={this.props.decimal}\r\n          value=\".\"\r\n          >\r\n          .\r\n        </button>\r\n        <button\r\n          id=\"equals\"\r\n          onClick= {this.props.evaluate}\r\n          style={{ background: \"#004466\", position: \"absolute\", height: 130, bottom: 5 }}\r\n          value=\"=\"\r\n          >\r\n          =\r\n          </button>\r\n        </div>\r\n              \r\n   );\r\n  }\r\n}\r\n\r\nclass Output extends React.Component {\r\n  render() {\r\n    return (\r\n    <div className=\"outputScreen\" id=\"display\">\r\n        {this.props.currentValue}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Formula extends React.Component {\r\n  render() {\r\n    return <div className=\"formulaScreen\">{this.props.formula}</div>;\r\n  }\r\n}\r\n\r\nexport default Calculator;",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":2,"column":8,"nodeType":"26","messageId":"27","endLine":2,"endColumn":14},{"ruleId":"28","severity":1,"message":"29","line":45,"column":51,"nodeType":"30","messageId":"31","endLine":45,"endColumn":55},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]